var opts = Object.prototype.toString;
var empty = {};
var _mixin = function(dest, source, copyFunc){
	var name, s, i, empty = {};
	for(name in source){
		s = source[name];
		if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){
			dest[name] = copyFunc ? copyFunc(s) : s;
		}
	}
	return dest; // Object
};
var lang = this;

exports.mixin = function(dest, args)
{
	if(!dest){ dest = {}; }
	for(var i = 1, l = arguments.length; i < l; i++){
		_mixin(dest, arguments[i]);
	}
	return dest; // Object
};

exports.isString = function(it){
	return (typeof it == "string" || it instanceof String); // Boolean
};

exports.isArray = function(it){
	return it && (it instanceof Array || typeof it == "array"); // Boolean
};

exports.isFunction = function(it){
	return opts.call(it) === "[object Function]";
},

exports.isObject = function(it){
	return it !== undefined &&
		(it === null || typeof it == "object" || lang.isArray(it) || lang.isFunction(it)); // Boolean
};

exports.isDefined = function(it)
{
	return it !== undefined;
};

//dest.key.value = src.key.value
exports.mixinSimple = function(dest,src){
  for(var key in src){
    dest[key] = src[key];
  }
  return dest;
};

//dest.key.subkey1.value = src.subkey1.value
exports.mixinComplex = function(dest,src,arguments){
  var length = arguments.length;
  for(var key in src){
    if(1 == length){
      dest[arguments[0]][key] = src[key];
    }else if(2 == length){
      dest[arguments[0]][arguments[1]][key] = src[key];
    }
  }
  return dest;
};

exports.toString = function(obj) {
	if ( obj == null ) return null;
	if ( lang.isObject(obj) ) return JSON.stringify(obj);
	else if ( lang.isString(obj) ) return obj;
	else return obj.toString();
};

exports.toNumber = function(obj) {
	if ( obj == null ) return null;
	if ( lang.isString(obj) ) return parseFloat(obj);
	return obj;
};

exports.replace = function(dest,src,arguments){
  dest[arguments] = src;
  return dest;
};

exports.replaceComplex = function(dest,src,arguments){
  var length = arguments.length;
  if(1==length){
    dest[arguments[0]] = src;
  }else if(2==length){
    var subDest = dest[arguments[0]];
    subDest[arguments[1]] = src;
    dest[arguments[0]] = subDest;
  }
  return dest;
};


exports.uuidCompare = function ( uuid1, uuid2 ) {
	if ( uuid1 && uuid2 )
		return ( uuid1.toString()==uuid2.toString() );

	if ( !uuid1 && !uuid2 )
		return true;
	else
		return false;
};
