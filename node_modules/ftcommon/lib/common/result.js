var codes = require('./codes');
var lang = require('./lang');
var util = require('util');
var Result = function(args){
	lang.mixin(this, args);
};

function isOk(r) {
	return r && r.result === 'ok';
}

Result.prototype.isOk = function(){
	return isOk(this);
}

var ok = function(value){
	var val = value?value:{};
	var params = { result: 'ok', value: val };
	var r = new Result(params);
	return r;
}

var error = function(){
	var params = { result: 'error' };
	var arg1 = arguments[0];
	var arg2 = arguments[1];
	if ( util.isNumber(arg1) ) {
		params.errCode = arg1;
	}
	if ( util.isString(arg1) ) {
		params.message = arg1.toString();
	}
	else if ( arg1 instanceof Error ) {
		params.message = arg1.toString();
		params.errCode = arg1.code || arg1.errCode || arg1.errcode || null;
	}
	else if ( util.isString(arg2) || arg2 instanceof Error ) {
		params.message = arg2.toString();
	}
	if ( !params.errCode ) params.errCode = codes.ERROR_UNKNOWN;
	var r = new Result(params);
	return r;
}

var correct = function(value){
	var val = value?value:{};
	var params = { result: 'ok', errCode: val };
	var r = new Result(params);
	return r;
}

var noop = function(result)
{
	return result;
}

exports.validate = function(cond)
{
	if ( !cond )
	{
		var code = codes.ERROR_INVALID_PARAMS;
		var message;
		if ( util.isNumber(arguments[1] ) )
		{
			code = arguments[1];
			message = arguments[2];
		}
		else
		{
			message = arguments[1];
		}
		var ret = error(code, message);
		return ret;
	}
	return null;
}

function isEmpty(s){
	if ( !s ) {
		if ( s === 0 ) return false;
		return true;
	}
	else {
		return false;
	}
}

exports.validateParamArray = function(paramArray){
    //default validate empty
    var code;
    if (paramArray) {
        for (var i = 0 ; i < paramArray.length ; i ++){
           var params = paramArray[i];
           var value = params[0];
           var validateType = params[1];
          // if( !value && (value != '0' && value != 0)) {
          if(isEmpty(value)){
              code = codes.ERROR_INVALID_PARAMS;
              var ret = error(code,value);
              return ret;
           }
           if( 'number' == validateType && !util.isNumber(value)){
              code = codes.ERROR_INVALID_PARAMS;
              var ret = error(code,value);
              return ret;
           }
           if( 'mobile' == validateType ){
              var reg = /^[1][3578]\d{9}/
              if(!reg.test(value)){
                 code = codes.ERROR_INVALID_PARAMS;
                 var ret = error(code,value);
                 return ret;
              }
           }
        }
    }
    return null;
}

var handle = function (fn, errCode, errMessage)
{
	return function(err, result)
	{
		var ret;
		if ( err ) {
			if ( err.errCode ) { // return object is an error
				ret = error(err.errCode, err.errMessage);
			}
			else {
				ret = error(errCode, errMessage);
			}
		}
		else {
			ret = ok(result);
		}
		fn(ret);
	}
}

var response = function(req, res)
{
	return function(result)
	{
		res.json(result);
	}
}

exports.ok = ok;
exports.error = error;
exports.handle = handle;
exports.response = response;
exports.correct = correct;
exports.isOk = isOk;
