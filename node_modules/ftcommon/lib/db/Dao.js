var metaMap = {};

var Metadata = function(args){
	this.table = args.table;
	var pks = args.primaryKeys;
	this.primaryKeys = {};
	if ( pks ) {
		//console.log(pks);
		pks.forEach(function(key,index){
			this.primaryKeys[key] = index;
		}.bind(this));
	}
	var columns = args.columns;
	this.columnsArray = args.columns;
	this.columnsString = this.columnsArray.join(',');
	this.columns = {};
	if ( columns ) {
		columns.forEach(function(key, index){
			this.columns[key] = index;
		}.bind(this));
	}
	var indexes = args.indexes;
	this.indexes = {};
	if ( indexes ) {
		indexes.forEach(function(col, index){
			this.indexes[col] = index;
		}.bind(this));
	}
}

Metadata.prototype = {
	isPrimaryKey: function(key) {
		return this.primaryKeys[key] != null;
	},
	isIndex: function(key){
		return this.indexes[key] != null;
	},
	exists: function(key){
		return this.columns[key] != null;
	},
	generateWhere: function(args, primaryKeyOnly, keys){
		var cols = [];
		if ( !keys ) keys = [];
		for ( var col in args ) {
			if ( this.isPrimaryKey(col) ) {
				cols.push(col);
			}
			else if ( !primaryKeyOnly && this.isIndex(col) ){
				cols.push(col);
			}
			else {
				if ( this.exists(col) )
					keys.push(col);
			}
		}
		var sql = '';
		var first = true;
		for ( var i = 0; i < cols.length; ++ i ) {
			if (first) first = !first;
			else sql += ' and ';
			sql += cols[i] +'=:'+cols[i];
		}
		return sql;
	},
	generateSelect: function(args){
		var where = this.generateWhere(args);
		var sql = 'select '+ this.columnsString+' from '+this.table ;
		if ( where ) sql +=' where '+where;
		return sql;
	},
	generateInsert: function(args){
		var cols = [];
		for(var key in args){
			if ( this.exists(key) ) cols.push(key);
		}
		var sql = 'insert into '+this.table + '('+cols.join(',')+') values (';
		sql += ':'+cols.join(',:');
		sql += ')';
		return sql;
	},
	generateUpdate: function(args){
		var cols = [];
		var sql = 'update '+this.table + ' set ';
		var where = this.generateWhere(args, true, cols);
		for ( var i = 0; i < cols.length; ++ i ){
			var col = cols[i];
			if ( i > 0 ) sql += ',';
			sql += col+'=:'+col;
		}
		sql += ' where '+where;
		return sql;
	},
	generateDelete: function(args){
		var sql = 'delete from '+this.table+' where '+this.generateWhere(args, true);
		return sql;
	}
};

var Dao = function(args)
{
	this.driver = args.driver;
	this.table = args.table;
	var driverId = this.driver.id;
	this.metaMap = metaMap[driverId];
	if (!this.metaMap) {
		this.metaMap = {};
		metaMap[driverId] = this.meta;
	}
}

function load(driver, metaMap, table, fn){
	var meta = metaMap[table];
	//console.log(meta);
	if ( meta === true ){
		// wait until metadata loaded
		//console.log('waiting for metadata of '+table+' loaded');
		setTimeout(function() {
			load(driver, metaMap, table, fn);
		}, 50);
	}
	else if ( meta ) {
		fn(null, meta);
	}
	else if ( meta === false ) {
		fn('Metadata of '+table+' load failed');
	}
	else{
		metaMap[table] = true;
		driver.metadata(table, function(err, data){
			if ( err ) {
				metaMap[table] = false;
				return fn(err);
			}
			data.table = table;
			var meta = new Metadata(data);
			metaMap[table] = meta;
			fn(err, meta);
		});
	}
}

Dao.prototype = {
	find: function(args, fn){
		load(this.driver, this.metaMap, this.table, function(err, meta){
			if ( err ) {return fn(err);}
			var sql = meta.generateSelect(args);
			this.driver.execute(sql, args, function(err, rows){
				if ( err ) fn(err);
				else {
					fn ( null, rows );
				}
			});
		}.bind(this));
	},
	select: function(where, args, fn) {
		load(this.driver, this.metaMap, this.table, function(err, meta){
			if ( err ) {return fn(err);}
			var sql = meta.generateSelect({});
			if ( where ) sql +=' '+ where;
			this.driver.execute(sql, args, function(err, rows){
				if ( err ) fn(err);
				else {
					fn ( null, rows );
				}
			});
		}.bind(this));
	},
	get: function(args, fn){
		load(this.driver, this.metaMap, this.table, function(err, meta){
			if ( err ) {return fn(err);}
			var sql = meta.generateSelect(args);
			this.driver.execute(sql, args, function(err, rows){
				if ( err ) fn(err);
				else {
					var row = rows && rows.length ? rows[0] : null;
					fn ( null, row );
				}
			});
		}.bind(this));
	},
	insert: function(args, fn){
		load(this.driver, this.metaMap, this.table, function(err, meta){
			if ( err ) {return fn(err);}
			var sql = meta.generateInsert(args);
			this.driver.execute(sql, args, function(err){
				fn(err);
			});
		}.bind(this));
	},
	update: function(args, fn){
		load(this.driver, this.metaMap, this.table, function(err, meta){
			if ( err ) {return fn(err);}
			var sql = meta.generateUpdate(args);
			this.driver.execute(sql, args, function(err){
				fn(err);
			});
		}.bind(this));
	},
	delete: function(args, fn){
		load(this.driver, this.metaMap, this.table, function(err, meta){
			if ( err ) {return fn(err);}
			var sql = meta.generateDelete(args);
			this.driver.execute(sql, args, function(err){
				fn(err);
			});
		}.bind(this));
	},
	execute: function(query, args, fn){
		this.driver.execute(query, args, fn);
	}
};

exports = module.exports = Dao
