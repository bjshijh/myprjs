var DaoDriver = function(){};
DaoDriver.prototype = {
	getTableMetadata: function(table, fn){
	},
	execute: function(query, params, options, fn) {
	}
};
var CassandraDriver = function(args){
	this.connection = args.connection;
};
CassandraDriver.prototype = {
	id: 'cassandra',
	metadata: function(table, fn){
		if ( !table ) {
			fn( new Error('Empty table') );
			return;
		}
		var pos = table.indexOf('.');
		var schema = null;
		if ( pos >= 0 ) {
			schema = table.substring(0, pos);
			table = table.substring(pos+1);
		}
		if ( !schema ) {
			schema = this.connection.keyspace;
		}
		if ( !schema ) {
			fn(new Error('Empty keyspace'));
			return;
		}
		var cql = 'select * from system.schema_columns where keyspace_name=? and columnfamily_name=?';
		this.connection.execute(cql, [schema, table], {prepare:true}, function(err, rs){
			if ( err ) { return fn(err); };
			var rows = rs.rows;
			var primaryKeys = [];
			var columns = [];
			var indexes = [];
			for (var i = 0; i < rows.length;++ i) {
				var row = rows[i];
				if ( row.type != 'regular' ) {
					primaryKeys.push(row.column_name);
				}
				if ( row.index_name ) {
					indexes.push(row.column_name);
				}
				columns.push(row.column_name);
			}
			fn(null, { primaryKeys: primaryKeys, columns: columns, indexes: indexes });
		});
	},
	execute: function(query, params, fn) {
		this.connection.execute(query, params, {prepare:true}, function(err, rs){
			if ( err ) fn(err);
			else {
				fn(null, rs.rows);
			}
		});
	}
};

var MysqlDriver = function(args){
	this.connection = args.connection;
};
MysqlDriver.prototype = {
	id: 'mysql',
	metadata: function(table, fn){
		var pos = table.indexOf('.');
		var schema = null;
		if ( pos >= 0 ) {
			schema = table.substring(0, pos);
			table = table.substring(pos+1);
		}
		if ( !schema ) {
			schema = this.connection.keyspace;
		}
		if ( !schema ) {
			fn(new Error('Empty keyspace'));
			return;
		}
		var colquery = 'select COLUMN_NAME from information_schema.columns where TABLE_SCHEMA=:schema and TABLE_NAME=:table';
		var idxquery = 'select COLUMN_NAME, INDEX_NAME from information_schema.statistics where TABLE_SCHEMA=:schema and TABLE_NAME=:table';
		var params = {schema: schema, table: table};
		var columns = [];
		var primaryKeys = [];
		var indexes = [];
		this.execute(colquery, params, function(err, rows){
			if ( err ) { return fn(err); };
			rows.forEach(function(row){
				columns.push(row.COLUMN_NAME);
			});
			this.execute(idxquery, params, function(err, rows){
				if ( err ) { return fn(err); }
				rows.forEach(function(row){
					var idxName = row.INDEX_NAME;
					var colName = row.COLUMN_NAME;
					if ( 'PRIMARY' == idxName ) primaryKeys.push(colName);
					else indexes.push(colName);
				});
				fn(null, {
					table: schema+'.'+table,
					primaryKeys: primaryKeys,
					columns: columns,
					indexes: indexes
				});
			}.bind(this));
		}.bind(this));
	},
	execute: function(query, params, fn){
		this.connection.query(query, params, fn);
	}
};
exports = module.exports = {
	cassandra: CassandraDriver,
	mysql: MysqlDriver
};
