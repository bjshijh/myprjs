var util = require('util')
var lang = require('../common/lang');
var Table = function(args){
	lang.mixin(this, args);
};

var Script = function(args){
	lang.mixin(this, args);
};

Script.prototype = {
	table: null,
	columns: null,
	prefix: '',
	postfix: '',
	text: '',
	where: function(text){
		this.text += " WHERE";
		if ( text ) this.text += ' ' + text;
		return this;
	},

	append: function(text) {
		this.text += text;
		return this;
	},

	eq: function(name, val) {
		return this.op(name, '=', val);
	},

	lt: function(name, val) {
		return this.op(name, '<', val);
	},

	gt: function(name, val) {
		return this.op(name, '>', val);
	},

	and: function() {
		this.text += ' and';
		return this;
	},

	or: function() {
		this.text += ' or';
		return this;
	},

	set: function(name, val) {
		this.text += ' set';
		this.text += this.eq(name, val);
		return this;
	},

	op: function(name, op, val){
		this.text += ' '+name+op+this.table._value(name, val);
		return this;
	},

	orderBy: function(){
		this.text += " order by";
		return this;
	},

	asc: function(name) {
		this.text += ' ' +name + ' asc';
		return this;
	},

	desc: function(name) {
		this.text += ' ' +name + ' desc';
		return this;
	},

	withIn: function(name, values) {
		var ddl = '';
		for ( var i = 0; i < values.length; ++ i ) {
			if ( i > 0 ) ddl += ',';
			ddl += this.table._value(name, values[i]);
		}
		this.text += ' '+name+' in ['+ddl+']';
		return this;
	},

	values: function(args) {
		var ddl = '';
		var values = makeArray(arguments,[]);
		for ( var i = 0; i < values.length; ++ i ) {
			var name = this.columns[i];
			if ( i > 0 ) ddl += ',';
			ddl += this.table._value(name, values[i]);
		}
		this.text += ' values (' + ddl + ')';
		return this;
	},

	end: function(){
		return this.prefix + this.text + this.postfix;
	}
}

function makeArray(args, defaultValue){
	if ( !args || !args.length ) return defaultValue;
	var cols = [];
	if ( args.length > 1 ) {
		for ( var i = 0; i < args.length; ++i ) {
			cols.push(args[i]);
		}
		return cols;
	}
	else {
		if ( util.isArray(args[0]) ) {
			return args[0];
		}
		else {
			cols.push(args[0]);
			return cols;
		}
	}
}

function joinNames(arg) {
	var valeus;
	if ( arg && lang.isArray(arg) ) {
		return arg.join();
	}
	else {  
		var arg = [];
		for ( var i = 0; i < arguments.length; ++i ) {
			arg.push(arguments[i]);
		}
		return arg.join();
	}
}

Table.prototype = {
	name : null,
	columns: null,
	types: null,
	primaryKey: null,
	indexes: null,
	orderBy: null,
	groupBy: null,
	options: null,
	
	create: function(client) {
		var ddls = [];
		var table = this.createTableScript(true);
		var indexes = this.createIndexScripts();
		var orders = this.createOrderScripts();
		ddls.push(table);
		if ( indexes ) ddls = ddls.concat(indexes);
		if ( orders ) ddls = ddls.concat(orders);
		return ddls;
	},

	drop: function() {
		var ddls = [];
		var name = this.name;
		var pos = name.indexOf('.');
		var keyspace = '';
		if ( pos >= 0 ) keyspace = name.substr(0, pos)+'.';
		if ( this.indexMap ) {
			for ( var col in this.indexMap ) {
				var indName = this.indexMap[col];
				ddls.push('drop index if exists '+keyspace+indName);
			}
		}
		if ( this.orderMap ) {
			for ( var col in this.orderMap ) {
				var ordName = this.orderMap[col];
				ddls.push('drop table if exists '+keyspace+ordName);
			}
		}
		var ddl = 'drop table if exists '+this.name;
		ddls.push(ddl);
		return ddls;
	},

	createTableScript: function(withIfNotExists){
		var ddl = 'create table ';
		if ( withIfNotExists) ddl += 'if not exists ';
		ddl += this.name+'(';
		for ( var i = 0; i < this.columns.length; ++ i ) {
			if ( i > 0 ) ddl += ', ';
			ddl += this.columns[i] + ' ' + this.types[i];
		}
		var pk = this.primaryKey;
		if ( !pk || !pk.length ) pk = [this.columns[0]];
		ddl += ', primary key ('+pk.join()+')';
		ddl += ')';
			//ddl += 'CLUSTERING ORDER bY (' +orderBy.join() +') ';
		return ddl;
	},

	createIndexScripts: function() {
		var indexes = this.indexes;
		if ( !indexes || !indexes.length ) return;
		var ddls = [];
		this.indexMap = {};
		var name = this.name;
		var pos = name.indexOf('.');
		if ( pos >= 0 ) name = name.substr(pos+1);
		for ( var i = 0; i < indexes.length; ++ i ) {
			var index = indexes[i];
			var indexName = name+'_idx'+i;
			//this.indexMap[indexName] = index;
			this.indexMap[index] = indexName;
			var ddl = 'create index if not exists '+indexName+' on '+this.name+' ('+index+')';
			ddls.push(ddl);
		}
		return ddls;
	},

	createOrderScripts: function() {
		var orderBy = this.orderBy;
		if ( !orderBy ) return;
		var ddls = [];
		this.orderMap = {};
		var typeMap = this._getTypeMap();
		var pk = this.primaryKey[0];
		var pkType = typeMap[pk];
		var i = 0;
		for ( var col in orderBy ) {
			var order = orderBy[col];
			var aidName = this.name+'_ord'+(++i);
			this.orderMap[col] = aidName;
			var colType = typeMap[col];
			var ddl = 'create table if not exists '+aidName+' (xord int, '+col+' '+colType+', '+ pk+' '+pkType+', primary key(xord, '+col+') ) with clustering order by ('+col+' '+order+')';
			ddls.push(ddl);
		}
		return ddls;
	},

	dropScript: function(ifExists){
		var ddl = 'drop table ';
		if ( ifExists ) ddl += 'if exists ';
		ddl += this.name;
		return ddl;
	},

	select: function(columns) {
		var ddl = 'select ';
		var columns = makeArray(arguments, this.columns);
		ddl += joinNames(columns&&columns.length?columns:this.columns);
		ddl += ' from ' + this.name;
		var script = new Script({table: this, prefix: ddl});
		return script;
	},
	
	update: function() {
		var ddl = 'update '+this.name;
		var script = new Script({table: this, prefix: ddl});
		return script;
	},

	insert: function(columns) {
		var ddl = 'insert into ' + this.name + ' (';
		columns = makeArray(arguments, this.columns);
		ddl += joinNames(columns);
		ddl += ')';
		var script = new Script({table: this, columns:columns, prefix: ddl});
		return script;
	},

	prepareSelect: function(args, map) {
		var typeMap = this._getTypeMap();
		var ddl = this.select().where().end();
		var first = true;
		var where = ' ';
		for (var key in args) {
			if ( this.primaryKey.indexOf(key) < 0) continue;
			var col = key;
			if ( map && map[key] ) {
				col = map[key];
			}
			if ( !first ) {
				where += ',';
			}
			else { first = !first; }
			where += col+'=:'+key;
		}
		ddl += where;
		return ddl;
	},

	prepareInsert: function(args, map) {
		var typeMap = this._getTypeMap();
		var ddl = 'insert into ' + this.name + ' (';
		var first = true;
		var values = ' values (';
		for (var key in args) {
			if ( !typeMap[key] ) continue;
			var col = key;
			if ( map && map[key] ) {
				col = map[key];
			}
			if ( !first ) {
				ddl += ',';
				values += ',';
			}
			else { first = !first; }
			ddl += col;
			values += ':'+key;
		}
		ddl += ')'+values + ')';
		return ddl;
	},

	prepareUpdate: function(args, map) {
		var typeMap = this._getTypeMap();
		var ddl = 'update ' + this.name;
		var firstSet = true;
		var firstWhere = true;
		var values = ' set ';
		var where = ' where ';
		for (var key in args) {
			if ( !typeMap[key] ) continue;
			var col = key;
			if ( map && map[key] ) {
				col = map[key];
			}
			if ( this.primaryKey.indexOf(key) >= 0) {
				if ( !firstWhere ) where +=' and ';
				else firstWhere = !firstWhere;
				where += key + '=:'+col;
				continue;
			}
			if ( !firstSet ) values += ',';
			else { firstSet = !firstSet; }
			values += key + '=:'+col;
		}
		ddl += values + where;
		return ddl;
	},

	prepareDelete: function(args, map) {
		var typeMap = this._getTypeMap();
		var ddl = 'delete from '+ this.name+' where '
		var first = true;
		var where = ' ';
		for (var key in args) {
			if ( this.primaryKey.indexOf(key) < 0) continue;
			var col = key;
			if ( map && map[key] ) {
				col = map[key];
			}
			if ( !first ) {
				where += ',';
			}
			else { first = !first; }
			where += col+'=:'+key;
		}
		ddl += where;
		return ddl;
	},

	_getTypeMap: function() {
		if ( !this.typeMap) {
			this.typeMap= {};
			for ( var i = 0; i < this.columns.length; ++ i){
				var column = this.columns[i];
				var type = this.types[i];
				this.typeMap[column] = type;
			}
		}
		return this.typeMap;
	},

	_value: function(name, value) {
		function isVar(val){
			if ( val && val.indexOf(':') == 0 ) return true;
			else return false;
		}
		var typeMap = this._getTypeMap();
		var type = typeMap[name];
		if ( !type ) {
			if ( util.isNumber(value) ) {
				return value;
			}
			else {
				if ( util.isString(value) && isVar(value) ) return value;
				else return "'"+value+"'";
			}
		}
		if ( type.toLowerCase() === 'int' || type.toLowerCase() === 'bigint' ) {
			return value;
		}
		else {
			if ( util.isString(value) && isVar(value) ) return value;
			else return "'"+value+"'";
		}
	},

	END_OF_TABLE: true
};

module.exports = Table;
