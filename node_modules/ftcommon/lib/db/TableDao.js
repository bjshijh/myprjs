var lang = require('../common/lang');
var dao = function(args){
	this.table = args.table;
	this.connection = args.connection;
}

function getArgs(args) {
	var query;
	var options,eachFn,endFn;
	if ( args.length == 3 ) {
		options = args[0];
		eachFn = args[1];
		endFn = args[2];
	}
	else if ( args.length == 2 ) {
		if ( lang.isFunction(args[0]) ) {
			eachFn = args[0];
			endFn = args[1];
		}
		else {
			options = args[0];
			eachFn = args[1];
		}
	}
	else if ( args.length == 1 ) {
		if ( lang.isFunction(args[0]) ) {
			eachFn = args[0];
		}
		else {
			options = args[0];
		}
	}
	return [options, eachFn, endFn];
}

dao.prototype = {
	list: function() {
		var args = getArgs(arguments);
		var options = args[0];
		var eachFn = args[1];
		var endFn = args[2];

		if ( options && options.where ) {
			var where = options.where;
			query = this.table.select().where(where).end();
		}
		else {
			query = this.table.select().end();
		}
		var client = this.connection;
		var opts = {prepare: true};
		lang.mixin(opts, options);
		if ( opts.pageState ) opts.autoPage = false;
		var execFn = client.execute;
		if ( eachFn && endFn ) {
			execFn = client.eachRow;
		}
		else if ( !eachFn && !endFn ){
			execFn = client.stream;
		}
		function callback(err, rs){
			if ( err ) fn(err);
			else {
				fn(null,rs.rows);
			}
		}
		var execParams = [];
		execParams.push(query);
		if ( options && options.params )
			execParams.push(options.params);
		else
			execParams.push([]);
		execParams.push(opts);
		if ( eachFn ) execParams.push(eachFn);
		if ( endFn ) execParams.push(endFn);
		return execFn.apply(client, execParams);
	},
	execute: function(query, args, fn){
		this.connection.execute(query, args, {prepare:true}, function(err, rs){
			fn(err, rs);
		});
	},
	put: function(args, fn) {
		var query = this.table.prepareInsert(args);
		if ( lang.isFunction(this.connection.fixUpdateOnInsert) ) {
			query = this.connection.fixUpdateOnInsert(query);
		}
		this.connection.execute(query, args, {prepare:true}, function(err, rs){
			if ( fn ) fn(err, args);
		});
	},
	update: function(args, fn) {
		var query = this.table.prepareUpdate(args);
		this.connection.execute(query, args, {prepare:true}, function(err, rs){
			if ( fn ) fn(err, args);
		});
	},
	get: function(args, fn, returnNull){
		var query = this.table.prepareSelect(args);
		this.connection.execute( query, args, {prepare: true}, function(err, rs){
			var row = rs && rs.rows && rs.rows[0] ?rs.rows[0]: null;
			if ( !returnNull ) {
				if ( row == null && err == null ) err = new Error('not found');
			}
			fn(err, row);
		});
	},
	remove: function(args, fn){
		var query = this.table.prepareDelete(args);
		this.connection.execute( query, args, function(err, rs){
			if ( fn ) fn(err, args);
		});
	}
}

module.exports = dao;
