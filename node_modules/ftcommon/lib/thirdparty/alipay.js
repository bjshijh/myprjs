var crypto = require('crypto');
var request = require('request')
var partner = "2088911968435790";
var privateKey = '-----BEGIN RSA PRIVATE KEY-----\n'+
'MIICXAIBAAKBgQCj1MNa9kcvJaBcgYrp4tMPm+NF+sPTCIk1HRgIcGf1LcXQhbMF\n'+
'MEQNOoRjCwjjTn4aNrJMh3SOAVygz4Hm3Wx94hCEvSjoXRN6Oze8TxWheB80ArTx\n'+
'/kQ5lt7rX55n8NRz3OjG0b1s09TWDgh524R/6Sy+DlbIXFI7k+U3PnQfLwIDAQAB\n'+
'AoGAeATnNJ0VGwH6j6pLJPqJWnb+MYb6rIAlXCa7M3t9fQ0STKeVtWhdgj9rOs+b\n'+
'rEIVeYi2aAAXr+xpellqNcHits2qy4GNe81QooWU8fzlM6Du4Xg/WwIRaiHqMCyB\n'+
'y5xYGPXLXGpqkHcxC5FynWLr28Ad+0LxLxDiO2GF5X6zfakCQQDQPbuEKSXvx75o\n'+
'T3iFbWVHqnU2Vd4BMb2M/ejeQjmNJFMbo7LPbX0NEpsITQa+yz2c4tyaWRqeV6A0\n'+
'IVFHYBErAkEAyWegKztKZZgMOGQQDnIbJprbakLwbSwZUs31Kn6si+INBtdtcL2J\n'+
'7zM2xSNXZfrxEZl3O4WA5hBsrT//bZnADQJAKI9tn79YCU0xlCWuhuaY7I2SCQRO\n'+
'mpLypayrF+d0SD6EBYUsBeUAj3RJSCOgpbb2iEFT0Kh8W80bgivfJfTbQwJAZUA+\n'+
'Sl2VSjvFMPhFBi4hLig91E7wtcGsvW8jKIjkT7KF4AGfWEVBOcqiZzscLf2ZAcMI\n'+
'KRk1svNg3zxEOiJIZQJBAL9vggNk6I6ULnzqbbhV+6DzsgnCY9ZwDdX/CJmEPW/z\n'+
'HBP1uDeAGjqoirX/JJp6Rreswhg2sWa2QqBQdhaI9bA=\n'+
'-----END RSA PRIVATE KEY-----';
var publicKey = '-----BEGIN PUBLIC KEY-----\r\n'+
'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCnxj/9qwVfgoUh/y2W89L6BkRA\r\n'+
'FljhNhgPdyPuBV64bfQNN1PjbCzkIM6qRdKBoLPXmKKMiFYnkd6rAoprih3/PrQE\r\n'+
'B/VsW8OoM8fxn67UDYuyBTqA23MML9q1+ilIZwBC2AQ2UBVOrFXfFl75p6/B5Ksi\r\n'+
'NG9zpgmLCUYuLkxpLQIDAQAB\r\n' + '-----END PUBLIC KEY-----\r\n';
var gateway = 'https://mapi.alipay.com/gateway.do?';

function sign(body) {
	var data = null;
	var keys = [];
	for ( var key in body) {
		if ( key == 'sign' || key == 'sign_type' ) continue;
		keys.push(key);
	}
	keys.sort();
	for ( var i = 0; i < keys.length; ++ i ) {
		var key = keys[i];
		var val = body[key];
		if ( data != null ) data += '&';
		else data = '';
		data += key + '=' + val;
	}
	console.log(data);
	var signer = crypto.createSign('RSA-SHA1');
	signer.update(data, 'utf8');
	var sign = signer.sign(privateKey,'base64');
	console.log(sign);
	return sign;
}
function verifySign(body) {
	var data = null;
	var keys = [];
	for ( var key in body) {
		if ( key == 'sign' || key == 'sign_type' ) continue;
		keys.push(key);
	}
	keys.sort();
	for ( var i = 0; i < keys.length; ++ i ) {
		var key = keys[i];
		var val = body[key];
		if ( data != null ) data += '&';
		else data = '';
		data += key + '=' + val;
	}
	console.log(data);
	sign = body.sign;

	var verifier = crypto.createVerify('RSA-SHA1');
	verifier.update(data, 'utf8');
	var result = verifier.verify(publicKey, sign, 'base64');
	return result;
}

function verifyReturn(body, callback) {
	var url = gateway+'service=notify_verify&partner='+partner+'&notify_id='+body['notify_id'];
	request.get(url, function(err, resp, body) {
		if ( callback ) callback(err, 'true' == body); 
	});
}

exports.sign = sign;
exports.verifySign = verifySign;
exports.verifyReturn = verifyReturn;
