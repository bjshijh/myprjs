var lang = require('../common/lang');
var qiniu = require('qiniu');
var request = require('request');
var client;
var cloud = function(args) {
	qiniu.conf.ACCESS_KEY = args.accessKey;
	qiniu.conf.SECRET_KEY = args.secretKey;
	this.bucket = args.bucket;
	this.domain = args.domain;
	client = new qiniu.rs.Client();
};

function uptoken(bucketname, args) {
  var putPolicy;
  if(bucketname)
    putPolicy = new qiniu.rs.PutPolicy(bucketname);
  else
    putPolicy = new qiniu.rs.PutPolicy(this.bucket);
  //var putPolicy = new qiniu.rs.PutPolicy(bucketname);
  //putPolicy.callbackUrl = callbackUrl;
  //putPolicy.callbackBody = callbackBody;
  //putPolicy.returnUrl = returnUrl;
  //putPolicy.returnBody = returnBody;
  //putPolicy.asyncOps = asyncOps;
  //putPolicy.expires = expires;
	lang.mixin(putPolicy, args);
  return putPolicy.token();
}

function accessToken(url, body){
	var qutil = qiniu.util;
	return qutil.generateAccessToken(url, body);
}

function uploadBuf(body, key) {
  var extra = new qiniu.io.PutExtra();
  //extra.params = params;
  //extra.mimeType = mimeType;
  //extra.crc32 = crc32;
  //extra.checkCrc = checkCrc;

	var token = uptoken(this.bucket);

  qiniu.io.put(token, key, body, extra, function(err, ret) {
    if (!err) {
      // 上传成功， 处理返回值
      console.log(ret.key, ret.hash);
      // ret.key & ret.hash
    } else {
      // 上传失败， 处理返回代码
      console.log(err)
      // http://developer.qiniu.com/docs/v6/api/reference/codes.html
    }
  });
}

function uploadFile(localFile, key, fn) {
  var extra = new qiniu.io.PutExtra();
  //extra.params = params;
  //extra.mimeType = mimeType;
  //extra.crc32 = crc32;
  //extra.checkCrc = checkCrc;
	//var token = uptoken(this.bucket);
	var token = uptoken('fruitpub');

  qiniu.io.putFile(token, key, localFile, extra, function(err, ret) {
    /* if(!err) {
      // 上传成功， 处理返回值
      console.log(ret.key, ret.hash);
      // ret.key & ret.hash
    } else {
      // 上传失败， 处理返回代码
      console.log(err);
      // http://developer.qiniu.com/docs/v6/api/reference/codes.html
    } */
		fn(err, ret);
  });
}

function downloadUrl(key) {
	var domain = this.domain;
  var baseUrl = qiniu.rs.makeBaseUrl(domain, key);
  var policy = new qiniu.rs.GetPolicy();
  return policy.makeRequest(baseUrl);
}

function remove(key, fn) {
	// http://developer.qiniu.com/docs/v6/api/reference/codes.html
	this.client.remove(this.bucket, key, fn);
}

function copy(src, dest, fn) {
	this.client.copy(this.bucket, src, this.bucket, dest, fn);
}

function move(src, dest, fn) {
	this.client.move(this.bucket, src, this.bucket, dest, fn);
}

function stat(name, fn) {
	this.client.stat(this.bucket, name, fn);
}

// avthumb/mp3/ab/128k/ar/44100/acodec/libmp3lame
function mediaOp(bucket, key, ops, notifyURL, fn)
{
	var qutil = qiniu.util;
	var params = {
		bucket: bucket,
		key: key,
		fops: ops,
		pipeline: 'ftop',
		notifyURL: notifyURL
	}
	var url = 'http://api.qiniu.com/pfop/';
	var body = '';
	for ( var key in params ) {
		var val = params[key];
		if ( body ) body += '&';
		body += key + '=' + encodeURIComponent(val);
	}
	//console.log(body);
	var token = accessToken(url, body);
	//console.log(token);
	request.post({
		url: url,
		headers: { 'Authorization' : token,
			'content-type': 'application/x-www-form-urlencoded'},
		contentType: 'application/x-www-form-urlencoded',
		body: body,
		json: true
		}, function (err, res, body) {
			if ( fn ) fn(err, body);
		}
	);
}

var WATERMARKURL = 'http://media.zhongledp.tv/ftwatermark.png';
function convertToMp4(key, newKey, fn){
	var saveKey = new Buffer('ftmedia:'+newKey,'utf-8').toString('base64');
	var op = 'avthumb/mp4/ab/128k/ar/44100/acodec/libfaac/r/30/vb/128k/vcodec/libx264/autoscale/1/stripmeta/0|saveas/'+saveKey;
	mediaOp('ftmedia', key, op, '', fn);
};

function addWatermark(key, newKey, fn){
	var saveKey = new Buffer('ftmedia:'+newKey,'utf-8').toString('base64');
	var waterMarkKey = new Buffer(WATERMARKURL, 'utf-8').toString('base64');
	var op = 'avthumb/mp4/wmImage/'+waterMarkKey+'/wmGravity/NorthWest|saveas/'+saveKey;
	mediaOp('ftmedia', key, op, '', fn);
};


cloud.prototype = {
	uptoken : uptoken,
	accessToken: accessToken,
	stat : stat,
	rename : move,
	copy : copy,
	remove : remove,
	upload : uploadFile,
	url : downloadUrl,
	mediaOp: mediaOp,
	convertToMp4: convertToMp4,
	addWatermark: addWatermark
}

module.exports = cloud;
