var crypto = require('crypto');
var request = require('request');
var co = require('co');
var thunkify = require('thunkify');

var apiBaseUrl = 'https://api.weixin.qq.com';
function apiUrl(path) {
	return apiBaseUrl + path;
}

function sha1Sign(params, keys, notGenerateRandomStr) {
	var data = null;
	if ( !keys ) keys = [];
	if ( !notGenerateRandomStr ) {
		var token = crypto.randomBytes(16);
		var nonce_str = token?token.toString('hex'):new Date().getTime();
		params['noncestr'] = nonce_str;
	}
	for ( var key in params) {
		keys.push(key);
	}
	keys.sort();
	for ( var i = 0; i < keys.length; ++ i ) {
		var key = keys[i];
		var val = params[key];
		if ( data != null ) data += '&';
		else data = '';
		data += key + '=' + val;
	}
	console.log(data);
	var hash = crypto.createHash('sha1').update(data,'utf8').digest('hex');
	return hash;
}
function md5Sign(params, keys, notGenerateRandomStr) {
	var data = null;
	if ( !keys ) keys = [];
	if ( !notGenerateRandomStr ) {
		var token = crypto.randomBytes(16);
		var nonce_str = token?token.toString('hex'):new Date().getTime();
		params['nonce_str'] = nonce_str;
	}
	for ( var key in params) {
		keys.push(key);
	}
	keys.sort();
	for ( var i = 0; i < keys.length; ++ i ) {
		var key = keys[i];
		var val = params[key];
		if ( data != null ) data += '&';
		else data = '';
		data += key + '=' + val;
	}
	data += '&key='+this.config.key;
	console.log(data);
	var hash = crypto.createHash('md5').update(data, 'utf8').digest('hex');
	return hash.toUpperCase();
}

function getSubmitData(params)
{
	var keys = [];
	var signData = this.md5Sign(params, keys, true);
	var buf = '<xml>';
	for ( var i = 0; i < keys.length; ++ i ) {
		var key = keys[i];
		var val = params[key];
		buf += '<'+key+'>'+val+'</'+key+'>';
	}
	buf += '<sign>'+signData+'</sign>';
	buf += '</xml>';
	return buf;
}

function wxRequest(url, xml, fn){
	if ( typeof(xml) === 'object' ) {
		xml = this.getSubmitData(xml);
		console.log('转换为xml\n', xml);
	}
	request({
		method:'POST',
		preambleCRLF: true,
    postambleCRLF: true,
		uri: url,
		headers: { 'content-type': 'text/xml' },
		body: xml
	}, function(err, resp, body) {
		console.log('发送请求', url, xml);
		fn(err, body);
	});
}

function wxJSONRequest(url, data, fn){
	request({
		method:'POST',
		preambleCRLF: true,
		postambleCRLF: true,
		uri: url,
		headers: { 'content-type': 'text/json' },
		body: JSON.stringify(data)
	}, function(err, resp, body) {
		console.log('发送请求', url, body);
		fn(err, body);
	});
}


/***
{ access_token: '',
  expires_in: 7200,
	refresh_token: '',
	openid: '',
	scope: 'snsapi_userinfo',
	unionid: '' }
 ***/
function _requestAccessToken(code, callback){
	var url = apiUrl('/sns/oauth2/access_token?');
	url += 'appid='+this.config.id+'&secret='+this.config.secret+'&code='+code+'&grant_type=authorization_code';
	request.get({url: url, json: true}, function(err, resp, result){
		callback(err, result);
	});
}

/***
{ openid: '',
  access_token: '',
	expires_in: 7200,
	refresh_token: '',
	scope: 'snsapi_base,snsapi_userinfo,' }
 ***/
function refreshToken(refresh_token, callback) {
	var url = apiUrl('/sns/oauth2/refresh_token?');
	url += 'appid='+this.config.id+'&grant_type=refresh_token&refresh_token='+refresh_token;
	request.get({url:url, json: true}, function(err, resp, result) {
		callback(err, result);
	});
}

function validateToken(openid, access_token, callback) {
	var url = apiUrl('/sns/auth?');
	url += 'access_token='+access_token+'&openid='+openid;
	request.get({url: url, json: true}, function(err, resp, result){
		callback(err, result);
	});
}

/**
{ openid: '',
  nickname: '',
	sex: 1,
	language: 'zh_CN',
	city: 'East',
	province: 'Beijing',
	country: 'CN',
	headimgurl: 'http://wx.qlogo.cn/mmopen/xxx/0',
	privilege: [],
	unionid: '' }
**/
function getUserInfo(openid, access_token, callback) {
	var url = apiUrl('/sns/userinfo?');
	url += 'access_token='+access_token+'&openid='+openid+'&lang=zh_CN';
	request.get({url: url, json: true}, function(err, resp, result){
		callback(err, result);
	});
}

function requestAppTicket(fn) {
	var config = this.config;
	var url = apiUrl('/cgi-bin/token?');
	url += 'grant_type=client_credential&appid='+config.id+'&secret='+config.secret;
	var now = new Date().getTime();
	var self = this;
	if ( self.appAccessToken && self.appTicket && (now - self.appTokenTime<self.expireTime*1000)){
		fn(null, {access_token:self.appAccessToken, expires_in: self.expireTime, ticket: self.appTicket, token_time:self.appTokenTime, cached: true});
		return;
	}
	request.get({url: url, json: true}, function(err, resp, result){
		if ( err ) {
			console.error('无法获取公众号access_token!', err);
			fn(err);
			return ;
		}
		else {
			if ( result.errcode ) {
				console.error('无法获取公众号access_token!', result);
				fn ( result.errmsg);
				return;
			}
			self.appAccessToken = result.access_token;
			if ( result.expires_in ) self.expireTime = parseInt(result.expires_in);
			self.appTokenTime = new Date().getTime();
			var url = apiUrl('/cgi-bin/ticket/getticket?');
			url += 'access_token='+self.appAccessToken+'&type=jsapi';
			request.get({url: url, json: true}, function(err, resp, ret){
				if (err){
					console.error('无法获取公众号的Ticket!', err);
					fn(err);
					return;
				}
				else {
					self.appTicket = ret.ticket;
					if ( ret.errcode != 0 ) {
						console.error('无法获取公众号的Ticket!', ret);
						fn(ret.errmsg);
						return;
					}
					else {
						fn(null, {access_token: self.appAccessToken, expires_in: self.expireTime, ticket: self.appTicket, token_time: self.appTokenTime});
					}
				}
			});
		}
	});
}

var wxapi = function(config){
	this.config = config;
}

/***
 * args { template, openid, url, data }
 */
function sendTemplateMessage(args, fn){
	var self = this;
	co(function*(){
		var result = yield thunkify(self.requestAccessToken.bind(self))();
		var access_token = result.access_token;
		var url = 'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=' + access_token;
		result = yield thunkify(self.wxJSONRequest.bind(self))(url, {
			touser: args.openid,
			template_id: args.template,
			url: args.url,
			data: args.data});
		if ( typeof(result) == 'string' ) {
			result = JSON.parse(result);
		}
		if ( result.errcode != 0 ) {
			var err = new Error(result.errmsg);
			err.errcode = result.errcode;
			err.errmsg = result.errmsg;
			fn (err);
		}
		else {
			fn(null, result);
		}
	}).catch(fn);
}

function requestAccessToken(){
	if ( arguments.length == 1 ) {
		requestAppTicket.apply(this, arguments);
	}
	else {
		_requestAccessToken.apply(this, arguments);
	}
}

wxapi.prototype = {
	sha1Sign: sha1Sign,
	md5Sign: md5Sign,
	getSubmitData : getSubmitData,
	getUserInfo : getUserInfo,
	requestAccessToken : requestAccessToken,
	refreshToken : refreshToken,
	validateToken : validateToken,
	requestAppTicket: requestAppTicket,
	wxRequest: wxRequest,
	wxJSONRequest: wxJSONRequest,
	sendTemplateMessage: sendTemplateMessage
};

module.exports = wxapi;
