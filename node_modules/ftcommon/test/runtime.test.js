var cluster = require('cluster');
var assert = require('assert');
var Runtime = require('../lib/common/runtime');
var RedisAdapter = require('../lib/common/RedisAdapter');
var workers = [];
var hooks = {};
var KEY = 'testkey';
var DEFAULT_VALUE = 'DEFAULT VALUE';
var NEW_VALUE = 'NEW VALUE';
if (cluster.isMaster) {
  // Fork workers.
  function send(n, value){
    var msg = null;
    if ( typeof(value) == 'object' ) {
      msg = JSON.stringify(value);
    }
    else {
      msg = value.toString();
    }
    workers[n].send(msg);
  }
  function handleMessage(data){
    var msg;
		//console.log('===>msg', data);
    try {
      msg = JSON.parse(data);
    }
    catch(e){
      msg = data;
    }
    if ( msg.callid && hooks[msg.callid] ){
      hooks[msg.callid](msg.value);
      delete hooks[msg.callid];
    }
  }
  function cmd(n, event, args){
    send(n, {event:event, args: args});
  }
  var cmdCounter = 0;
  function cmd2(n, event, args, fn){
    var callid = new Date().getTime()+'.'+(cmdCounter++);
    hooks[callid] = fn;
    send(n, {callid: callid, event:event, args: args});
  }

  suite('Runtime', function(){
    suiteSetup(function(done){
      for (var i = 0; i < 2; i++) {
        var worker = cluster.fork();
        workers.push(worker);
        worker.on('message', handleMessage);
      }
			setTimeout(done,1000);
    });
    suiteTeardown(function(done){
      for(var i =0; i < workers.length; ++i ){
        workers[i].kill();
      }
      done();
    });
    test('Multi-process runtime test', function(next){
      this.timeout(10000);
      setTimeout(function(){
        cmd(0, 'set', {key: 'key1', value: 123});
        var values = [];
        function getValue(val){
          values.push(val);
          if ( values.length == 2 ) {
            assert.equal(values[0], 123);
            assert.equal(values[1], 123);
            next();
          }
				}
        setTimeout(function(){
          cmd2(0, 'get', 'key1', getValue);
          cmd2(1, 'get', 'key1', getValue);
        },1000);
      }, 1000);
    });

    test('Single process runtime test', function(next){
      var runtime = new Runtime();
      runtime.register(KEY, DEFAULT_VALUE, function(value){

      });
      runtime.start();
      var value = runtime.get(KEY);
      assert.equal(value, DEFAULT_VALUE, 'Get default value correctly');
      runtime.set(KEY, NEW_VALUE);
      value = runtime.get(KEY);
      assert.equal(value, NEW_VALUE, 'Get new value correctly');
      next();
    });


  });
}
else {
  var runtime = new Runtime({adapter:new RedisAdapter()});
  runtime.register('key1', 100, function(value){
  });
  runtime.start(function(err){
  });
  process.on('message', function(data){
    var msg = JSON.parse(data);
    var args = msg.args;
		//console.log('message',msg);
    if ( msg.event == 'set' ) {
      runtime.set(args.key, args.value);
    }
    else if ( msg.event == 'get' ) {
      var key = args;
      runtime.get(args, function(val){
				var callid = msg.callid;
        if ( callid ){
          setTimeout(function(){
            process.send({callid: callid, value: val});
          },0);
        }
      });
    }
  });
  suite('Dummy test in worker process', function(){
    test('Idle waiting', function(done){
			this.timeout(4000);
			setTimeout(done,3000);
		});
  });
}
